==============================================================================
SHA1散列
========
SHA1散列经常用于生成二进制文件或者文本块的短标识。例如，git版本控制系统大量使
用SHA1来标识受版本控制的文件和目录。
Go在多个crypto/*包中实现了一系列散列函数。
产生一个散列值的方式是crypto/sha1.New()，crypto/sha1.Wtrite(byte)，然后是使用
crypt/sha1.Sum([]byte{})。
其它的散列值和SHA1计算散列值的形式是相似的。
如果需要在密码学上的安全散列，要研究一下哈希强度。
----------------------------
package main

import (
	"crypto/sha1"
	"fmt"
)

func main() {
	s := "sha1 this string"
	
	h := sha1.New()
	h.Write([]byte(s))
	bs := h.Sum(nil)

	fmt.Println(s)
	//SHA1值经常以16进制输出，使用%x来将散列结果格式为16进制格式输出
	fmt.Printf("%x\n",bs)
}
==============================================================================
base64是网络上最常见的用于传输8bit字节代码方式之一，base64编码可用于在HTTP环境
下传递较长的标识信息。在其它应用程序中，常常需要把二进制数据编码为适合放在URL
（包括隐藏表单域）中的形式，采用base64编码具有不可读性。
标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的“/”和“+”
字符变为形如“%XX”的形式，而这些“%”号在存入数据库时还需要再进行转换。
为解决此问题，可采用一种用于URL的改进Base64编码，它在末尾填充'='号，并将标准
Base64中的“+”和“/”分别改成了“-”和“_”，这样就免去了在URL编解码和数据库存储时所
要作的转换，避免了编码信息长度在此过程中的增加，并统一了数据库、表单等处对象标
识符的格式。
另有一种用于正则表达式的改进Base64变种，它将“+”和“/”改成了“!”和“-”，因为“+”,“*”
以及前面在IRCu中用到的“[”和“]”在正则表达式中都可能具有特殊含义。
此外还有一些变种，它们将“+/”改为“_-”或“._”（用作编程语言中的标识符名称）或“.-”
（用于XML中的Nmtoken）甚至“_:”（用于XML中的Name）。
base64也会经常用作一个简单的“加密”来保护某些数据，而真正的加密通常都比较繁琐。
在MIME格式的电子邮件中，base64可以用来将binary的字节序列数据编码成ASCII字符序
列构成的文本。使用时，在传输编码方式中指定base64。使用的字符包括大小写字母各26
个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。
----------------------------------------------
Go提供内建的base64编解码支持。 encoding/base64
Go同时支持标准的和URL兼容的base64格式。编码需要使用[]byte类型的参数，所以要将
字符串转换成此类型。
解码可能会返回错误，如果不确定输入信息格式是否正确，那么，就需要进行错误检查。
标准base64编码和URL兼容base64编码的编码字符串存在稍许不同（后缀为+和-），但是
两者都可以正确解码为原始字符串。
encoding/base64.StdEncoding.EncodeToString([]byte())
encoding/base64.StdEncoding.DecodeString()
encoding/base64.URLEncoding.EncodeToString([]byte())
encoding/base64.URLEncoding.DecodeString()
---------------------------------
package main

import (
	b64 "encoding/base64"
	"fmt"
)

func main() {
	data := "abc123!?$*&()'-=@~"

	sEnc := b64.StdEncoding.EncodeToString([]byte(data))
	fmt.Println(sEnc)

	sDec,_ := b64.StdEncoding.DecodeString(sEnc)
	fmt.Println(string(sDec))
	fmt.Println()

	uEnc := b64.URLEncoding.EncodeToString([]byte(data))
	fmt.Println(uEnc)
	uDec,_ := b64.URLEncoding.DecodeString(uEnc)
	fmt.Println(string(uDec))
}
==============================================================================
==============================================================================
