=============================================================================
在使用Go工具go build时，传递-gcflag "-N -l"参数，可以忽略Go语言内部做的一些优
化，如聚合变量和函数等优化，如果不加这样的参数编译出来的是优化过的程序，这样
对用GDB来调试程序时是很困难的，所以用GDB调试Go语言程序时要用Go语言的工具进行
编译（go build -gcflag "-N -l"）以便于调试。
=============================================================================
GDB常用命令
===========
*list
简写命令l，用来显示源代码，默认显示十行代码。后面可以带上参数显示具体的行。
*break
简写命令b，用来设置断点，后面跟上参数设置断点的行数。
*delete
简写命令d，用来删除断点，后面跟上断点的序号，这个序号可以通过info breakpoints
获取相应的设置的断点序号。
*backtrace
简写命令bt，用来打印执行的代码过程。
*info
info命令用来显示信息，后面有几种参数。
1.info locals
显示当前执行的程序中的变量值。
2.info breakpoints
显示当前设置的断点列表。
3.info goroutines
显示当前执行的goroutine列表，带*的表示当前执行。
*print
简写命令p，用来打印变量或者其他信息，后面跟上需要打印的变量名，还有一些很有用
的函数$len()和$cap()，用来返回当前string slices或者maps的长度和容量。
*whatis
用来显示当前变量的类型，后面跟上变量名。
*next
简写命令n，用来单步调试，跳到下一步，当有断点之后，可以输入n跳转到下一步继续
执行。
*coutinue
简写命令c，用来跳出当前断点处，后面可以跟参数N，跳过多少次断点。
*set variable
该命令用来改变运行过程中的变量值，格式如：set variable <var>=<value>
=============================================================================
package main

import (
	"fmt"
	"time"
)

func counting(c chan<- int) {
	for i := 0; i < 10; i++ {
		time.Sleep(2 * time.Second)
		c <- i
	}
	close(c)
}

func main() {
	msg := "Starting main"
	fmt.Println(msg)
	bus := make(chan int)
	msg = "starting a gofunc"
	go counting(bus)
	for count := range bus {
		fmt.Println("count:", count)
	}
}
=========================================
go build -gcflags "-N -l" gdbfile.go
gdb gdbfile
run
b 23
list
info locals
p bus
c
c
info locals
info locals
c
info goroutines
goroutine 1 bt
=============================================================================

