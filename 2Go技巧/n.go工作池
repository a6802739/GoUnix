==============================================================================
使用Go协程和通道实现一个工作池。
--------------------------------
package main

import (
	"fmt"
	"time"
)

//工作池
func worker(id int,jobs <-chan int,results chan<- int) {
	for j := range jobs {
		fmt.Println("worker",id,"processing job",j)
		time.Sleep(time.Second)
		results <-j*2
	}
}

func main() {
	jobs := make(chan int,100)
	results := make(chan int,100)

	//启动了３个worker，初始是阻塞的，由于还没有传递任务
	for w := 1;w <= 3;w++ {
		go worker(w,jobs,results)
	}

	//发送９个jobs，然后close这些通道来表示这些就是所有的任务了
	for j := 1;j <= 9;j++ {
		jobs <- j
	}
	close(jobs)
	
	//最后收集所有这些任务的返回值
	for a := 1;a <= 9;a++ {
		<-results
	}
}

整个程序处理所有的任务仅执行了3s而不是9s，因为3个worker是并行的。
==============================================================================
==============================================================================
