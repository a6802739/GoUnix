=============================================================================
在运行时反射是程序检查其所用有的数据结构，尤其是数据类型的一种能力，这是元编程
的一种形式。也是造成混淆的重要来源。
==========
类型和接口
==========
反射构建于类型系统之上，Go是静态类型的，每一个变量都有一个静态的类型，也就是
说，一个已知类型在编译时就确定下来了。
在类型中一个重要的类别就是接口类型，接口类型是表示固定的一个方法集合。一个接
口变量可以存储任意实际值（非接口），只要这个值实现了接口的方法。
接口类型的一个非常重要的例子是空接口：interface{}，它表示空的方法集合，由于任
何值都有另个或者多个方法，所有任何值都可以满足它。
有人说Go的接口是动态类型的，不过这是一种误解，它们是静态类型的：接口类型的变
量总是有着相同的静态类型，这个值总是满足空接口，只是存储在接口变量中的值在运
行时有可能被改变类型。
==========
接口的特色
==========
接口类型的变量存储了两个内容：赋值给变量实际的值和这个值的类型描述，更准确的
说，值是底层实现了接口的实际数据项目，而类型描述了这个项目完整的类型。
一个很重要的细节是接口内部的对总是（value，实际类型）的格式，而不是有（value，
接口类型）的格式，接口不能保存接口值。
=========================
反射的第一条规则
1从接口值到反射对象的反射
=========================
在基本的层面上，反射只是一个检查存储在接口变量中的类型和值的算法。在reflect包
中有两个类型需要了解：Type和Value，这两个类型使得可以访问接口变量的内容，还有
两个简单的函数reflect.TypeOf和reflect.ValueOf，从接口值中分别获取reflect.Type
和reflect.Value，同样，从reflect.Value也很容易能够获得reflect.Type，不过这里
让Value和Type在概念上分离了。
反射库有着若干特性值得特别说明，首先，为了保持API的简洁，“获得者”和“设置者“用
Value的最宽泛的类型来处理值。第二个特性是反射对象的Kind描述了底层类型，而不是
静态类型。如果一个反射对象包含了用户定义的整数类型的值，其Kind不是返回的用户
定义的类型，而是底层的数据类型。
=========================
反射的第二条规则
2从反射对象到接口值的反射
=========================
如同物理中的反射，在Go中的反射也存在它自己的镜像。
简单来说，Interface方法是ValueOf函数的镜像，除了返回值总是静态类型interface()
反射可以从接口值到反射对象，也可以反过来。
=================================
反射的第三条规则
3为了修改反射对象，其值必须可设置
=================================
设置性是反射值的一个属性，并不是所有的反射值有它。
设置性有一点点像地址化，但是更严格。设置性取决于反射对象是否保存原始项目。
var x float = 3.4
v := reflect.ValueOf(x)
这样是传递一个x的副本到reflect.ValueOf，所以接口值作为reflect.ValueOf参数创建
了x的副本，而不是x本身。如果允许v.SetFlaot(7.1)执行，它也无法更新x。反之，如果
在反射值内部允许更新x的副本，那么x本身不会收到影响，这会造成混淆，并毫无意义，
因此这是非法的，而设置性是用于解决这个问题的属性。
如果希望通过反射来修改x，必须向反射库提供一个希望修改的值的指针。
var x float64 = 3.4
p := reflect.ValueOf(&x)  //注意：获取x的地址
fmt.Println("type of p:",p.Type())
fmt.Println("settability of p:",p.Canset())
输出
typeof p: *float64
settability of p:false
======
结构体
======
当使用反射修改结构体的字段的时候，也就是当有结构体的地址的时候，可以修改它的
字段。
========
反射规则
========
1从接口值到反射对象的反射
2从反射对象到接口值的反射
3为了修改反射对象，其值必须可设置
反射是一个强大的工具，除非真的有必要，否则应当避免使用或小心使用。
=============================================================================
=============================================================================
