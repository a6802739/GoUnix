==============================================================================
io/ioutil
=========

package main

import (
	"fmt"
	"io/ioutil"
)
//数据结构
type Page struct {
	Title	string
	Body	[]byte
}

func (p *Page) save() error {
	filename := p.Title + ".txt"
	return ioutil.WriteFile(filename,p.Body,0600)
}

func loadPage(title string) (*Page,error) {
	filename := title + ".txt"
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	return &Page{Title:title,Body:body},nil
}

func main() {
	p1 := &Page{Title:"TestPage",Body:[]byte("This is a sample Page.")}
	p1.save()
	p2,_ := loadPage("TestPage")
	fmt.Println(string(p2.Body))
}
这个实例主要是为了演示将Web的页面抽象成相应的数据结构及ioutil包对文件的操作
==============================================================================
net/http
========

package main

import (
	"fmt"
	"net/http"
)

//请求执行的动作
func handler(w http.ResponseWriter,r *http.request) {
	fmt.Fprintf(w, "Hi there,I love %s!",r.URL.Path[1:])
}

func main() {
	//路由到/并执行相应的动作
	http.HandleFunc("/",handler)
	http.ListenAndServe(":8080",nil)
}
//使用net/http包
-----------------------------------------
package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
)

//执行相应的动作
func viewHandler(w http.ResponseWriter,r *http.Request) {
	title := r.URL.Path[len("/view/"):]
	p,_ := loadPage(title)
	fmt.Fprintf(w,"<h1>%s</h1><div>%s</div>",p.Title,p.Body)
}

func main() {
	//路由到/view/并执行viewHandler动作
	http.HandleFunc("/view/",viewHandler)
	http.ListenAndServe(":8080",nil)
}
//使用io/ioutil和net/http包
=============================================================================
html/template io/ioutil net/http
================================
package main

import (
	"html/template"  //替代fmt用HTML模板渲染输出
	"io/ioutil"
	"net/http"
)

//数据结构
type Page struct {
	Title	string
	Body 	[]byte
}

//保存文件
func (p *Page) save() error {
	filename := p.Title + ".txt"
	return ioutil.WriteFile(filename,p.Body,0600)
}

//加载文件
func loadPage(title string) (*Page,error) {
	filename := title + ".txt"
	body,err := ioutil.ReadFile(filename)
	if err != nil {
		return nil,err
	}
	return &Page{Title:title,Body:body},nil
}

//渲染模板
func renderTemplate(w http.ResponseWriter,tmpl string,p *Page) {
	t,_ := template.ParseFiles(tmpl + ".html")
	t.Execute(w,p)
}

//执行路由/view/动作viewHandler
func viewHandler(w http.ResponseWriter,r *http.Request) {
	title := r.URL.Path[len("/view/"):]
	p,_ := loadPage(title)
	renderTemplate(w,"view",p)
}

//执行路由/edit/动作editHandler
func editHandler(w http.ResponseWriter,r *http.Request) {
	title := r.URL.Path[len("/edit/"):]
	p,err := loadPage(title)
	if err != nil {
		p = &Page{Title:title}
	}
	renderTemplate(w, "edit",p)
}

func main() {
	http.HandleFunc("/view/",viewHandler)
	http.HandleFunc("/edit/",editHandler)

	http.ListenAndServe(":8080",nil)
}
----------------
处理不存在的网页
----------------
func viewHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/view/"):]
	p, err := loadPage(title)
	if err != nil {
		//网页重定向
		http.Redirect(w,r,"/edit/"+title,http.StatusFound)
		return
	}
	renderTemplate(w,"view",p)
}
//http.StatusFound HTTP302状态码
----------------
保存修改过的表单
----------------
func saveHandler(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/save/"):]
	body := r.FormValue("body")
	p := &Page{Title:title,Body:[]byte(body)}
	p.save()
	http.Redirect(w,r,"/view/"+title,http.StatusFound)
}
--------
错误处理
--------
func renderTemplate(w http.ResponseWriter, tmpl string,p *Page) {
	t, err := template.ParseFiles(tmpl + ".html")
	//网页中的错误处理
	if err != nil {
		http.Error(w,err.Error(),http.StatusInternalServerError)
		return
	}
	err = t.Execute(w,p)
	//网页中的错误处理
	if err != nil {
		http.Error(w,err.Error(),http.StatusInternalServerError)
	}
}

func saveHandler(w http.ResponseWriter,r *http.Request) {
	title := r.URL.Path[len("/save/"):]
	body := r.FormValue("body")
	p := &Page{Title:title,Body:[]byte(body)}
	err := p.save()
	if err != nil {
		http.Error(w,err.Error(),http.StatusInternalServerError)
		return
	}
	http.Redirect(w,r,"/view/"+title,http.StatusFound)
}
--------
模板缓存
--------
edit.html

<h1>Editing {{.Title}}</h1>
<form action="/save/{{.Title}}" method="POST">
<div><textarea name="body" rows="20" cols="80">{{printf "%s" .Body}}</textarea></div>
<div><input type="submit" value="Save"></div>
</form>

view.html

<h1>{{.Title}}</h1>
<p>[<a href="/edit/{{.Title}}">edit</a>]
<div>{{prinft "%s" .Body}}</div>

//上面的方法是每解析一个文件就需要加载和渲染一次,这样会浪费时间
//我们可以通过一次将多个文件都解析为可引用的单一的*Template,然后通过使用这个方
//法ExecuteTemplate渲染成为一个特定的模板.
//这样在我们添加新的模板的时候就比较的方便了.只用添加模板的名字,或将模板整合.

var templates = template.Must(template.ParseFiles("edit.html","view.html"))

func renderTemplate(w http.ResponseWriter,tmpl string,p *Page) {
	err := templates.ExecuteTemplate(w, tmpl+".html",p)
	if err != nil {
		http.Error(w,err.Error(),http.StatusInternalServerError)
	}
}
==============================================================================
验证(Validation)
================
//当用户提供一个随意的路径在服务器上进行读写的话,这明显是一个严重的安全漏洞,
//如普通用户获得了管理员的url资源,为了避免这个发生,需要使用一个正则表达式来验
//证提交的url资源.

import regexp

var validPath = regexp.MustCompile("^/(edit|save|view)/([a-zA-Z0-9]+)$")

func getTitle(w http.ResponseWriter,r *http.Request)(string, error) {
	m := validPath.FindStringSubmatch(r.URL.Path)
	if m == nil {
		http.NotFound(w,r)
		return "",errors.New("Invalid Page Title")
	}
	return m[2],nil //Titl是第二个子表达式
}
-------------每个动作都需要验证一下--------------

func viewHandler(w http.ResponseWriter, r *http.Request) {
    title, err := getTitle(w, r)
    if err != nil {
        return
    }
    p, err := loadPage(title)
    if err != nil {
        http.Redirect(w, r, "/edit/"+title, http.StatusFound)
        return
    }
    renderTemplate(w, "view", p)
}

func editHandler(w http.ResponseWriter, r *http.Request) {
    title, err := getTitle(w, r)
    if err != nil {
        return
    }
    p, err := loadPage(title)
    if err != nil {
        p = &Page{Title: title}
    }
    renderTemplate(w, "edit", p)
}

func saveHandler(w http.ResponseWriter, r *http.Request) {
    title, err := getTitle(w, r)
    if err != nil {
        return
    }
    body := r.FormValue("body")
    p := &Page{Title: title, Body: []byte(body)}
    err = p.save()
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
    http.Redirect(w, r, "/view/"+title, http.StatusFound)
}
==============================================================================
函数闭包
========
//上面的每个动作函数都需要进行url验证和错误检查,这让代码重复了很多.
//我们需要将url验证和错误检查封装进入一个函数中统一调用,这样看起来就会更简洁.
//函数文字相当于一个匿名函数,如
//f := func(x,y int) int { return x + y }

//首先,我们需要重新定义每一个执行动作的函数,让其接受三个参数,多了一个title.
func viewHandler(w http.ResponseWriter,r *http.Request,title string)
func editHandler(w http.ResponseWriter,r *http.Request,title string)
func saveHandler(w http.ResponseWriter,r *http.Request,title string)

//现在定义一个上面类型函数的包裹函数,并且返回一个http.HandlerFunc类型的函数,
//这个返回类型(http.HandlerFunc类型函数)适合传递给函数http.HandleFunc.
func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter,r *http.Request) {
		//valition(验证)
		//error(验证里的错误检查)
		//fn(调用函数自身)
	}
}
------------------------------
func makeHandler(fn func(http.ResponseWriter, *http.Request,string)) http.HandlerFunc {
	return func(w http.ResponseWriter,r *http.Request) {
		m := validPath.FindStringSubmatch(r.URL.Path)
		if m == nil {
			http.NotFound(w,r)
			return
		}
		fn(w,r,m[2])
	}
}

func main() {
	http.HandleFunc("/view/",makeHandler(viewHandler))
	http.HandleFunc("/edit/",makeHandler(editHandler))
	http.HandleFunc("/save/",makeHandler(saveHandler))

	http.ListenAndServe(":8080",nil)
}
-------------------------final code--------------------------
package main

import (
	"html/template"
	"io/ioutil"
	"net/http"
	"regexp"
)

type Page struct {
	Title string
	Body  []byte
}

func (p *Page) save() error {
	filename := p.Title + ".txt"
	return ioutil.WriteFile(filename, p.Body, 0600)
}

func loadPage(title string) (*Page, error) {
	filename := title + ".txt"
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	return &Page{Title: title, Body: body}, nil
}

//移除了验证及验证的错误检查后的动作执行
func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		http.Redirect(w, r, "/edit/"+title, http.StatusFound)
		return
	}
	renderTemplate(w, "view", p)
}

//移除了验证及验证的错误检查后的动作执行
func editHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		p = &Page{Title: title}
	}
	renderTemplate(w, "edit", p)
}

//移除了验证及验证的错误检查后的动作执行
func saveHandler(w http.ResponseWriter, r *http.Request, title string) {
	body := r.FormValue("body")
	p := &Page{Title: title, Body: []byte(body)}
	err := p.save()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	http.Redirect(w, r, "/view/"+title, http.StatusFound)
}

//一次多个文件的模板解析
var templates = template.Must(template.ParseFiles("edit.html", "view.html"))

//渲染模板
func renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {
	err := templates.ExecuteTemplate(w, tmpl+".html", p)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
	}
}

//正则表达式的验证变量
var validPath = regexp.MustCompile("^/(edit|save|view)/([a-zA-Z0-9]+)$")

//验证以验证错误检查的集体执行动作的封装(闭包 匿名函数)
func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		m := validPath.FindStringSubmatch(r.URL.Path)
		if m == nil {
			http.NotFound(w, r)
			return
		}
		fn(w, r, m[2])	//注意自身的调用
	}
}

func main() {
	http.HandleFunc("/view/", makeHandler(viewHandler))
	http.HandleFunc("/edit/", makeHandler(editHandler))
	http.HandleFunc("/save/", makeHandler(saveHandler))

	http.ListenAndServe(":8080", nil)
}
==============================================================================
RESTful API 设计指南
====================

----
协议
----
API与用户的通信协议,总是使用HTTPS协议.

----
域名
----
应该尽量将API部署在专用域名之下.
https://api.example.com
如果确定API很简单,不会有进一步扩展,可以考虑放在主域名下.
https://example.org/api/

----------------
版本(Versioning)
----------------
应该将API的版本号放入URL.
https://api.example.com/v1/
另一种做法是,将版本号放在HTTP头信息中,但不如放入URL方便和直观.

--------------
路径(Endpoint)
--------------
路径又称"终点"(endpoint),表示API的具体网址.
在RESTful架构中每个网址代表一种资源(resource),所以网址中不能有动词,只能有名词,
而且所用的名词往往与数据库的表格名对应.一般来说,数据库中的表都是同种记录的"集
合"(collection),所以API中的名词也应该使用复数.

举例来说,有一个API提供动物园(zoo)的信息,还包括各种动物和雇员的信息,则他的路径
应该设计成下面这样.
https://api.example.com/v1/zoos
https://api.example.com/v1/animals
https://api.example.com/v1/employees

--------
HTTP动词
--------
对于资源的具体操作类型,由HTTP动词表示.
常用的HTTP动词有下面五个(括号里是对应的SQL命令).
GET(SELECT)	从服务器取出资源(一项或多项)
POST(CREATE)	在服务器新建一个资源.
PUT(UPDATE)	在服务器更新资源(客户端提供改变后的完整资源).
PATCH(UPDATE)	在服务器更新资源(客户端提供改变的属性).
DELETE(DELETE)	从服务器删除资源.
还有两个不常用的HTTP动词.
HEAD		获取资源的元数据.
OPTIONS		获取信息,关于资源的那些树形是客户端可以改变的.
下面是一些例子:
GET /zoos			列出所有动物园
POST /zoos			新建一个动物园
GET /zoos/ID			获取某个指定动物园的信息
PUT /zoos/ID			更新某个指定动物园的信息（提供动物园全部信息）
PATCH /zoos/ID			更新某个指定动物园的信息（提供动物园部分信息）
DELETE /zoos/ID			删除某个动物园
GET /zoos/ID/animals		列出某个指定动物园的所有动物
DELETE /zoos/ID/animals/ID	删除某个指定动物园的指定动物

-------------------
过滤信息(Filtering)
-------------------
如果记录数量很多,服务器不可能都将它们返回给用户.API应该一同参数,过滤返回结果.
一些常见的参数.
?limit=10		指定返回记录的数量
?offset=10		指定返回记录的开始位置
?page=2&per_page=100	指定低级也,以及每页的记录数
?sortby+name&order=asc	指定返回结果按照哪个树形排序,以及排序顺序
?animal_type_id=1	指定筛选条件
参数的设计允许存在冗余,即允许API路径和URL参数偶尔有重复.比如
GET /zoo/ID/animals与GET /animals?zoo_id=ID的含义是相同的.

--------------------
状态码(Status Codes)
--------------------
服务器向用户返回的状态码和提示信息,常见的有以下一些(方括号中为该状态码对应的
HTTP动词).
200 OK - [GET]			服务器成功返回用户请求的数据.
201 CREATED - [POST/PUT/PATCH]	用户新建或修改数据成功
202 Accepted - [*]		表示一个请求已经进入后台排队(异步任务)
204 NO CONTENT - [DELETE]	用户删除数据成功
400 INVALID REQUEST-[POST/PUT/PATCH]	用户发出的请求有错误
401 Unauthorized - [*]		表示用户没有权限(令牌 用户名 密码错误)
403 Forbidden - [*]		表示用户得到授权,但是访问是被禁止的.
404 NOT FOUND - [*]		用户发出的请求针对的是不存在的记录.
406 Not Acceptable - [GET]	用户请求的格式不可得(如清JSON,却只有XML)
410 Gone - [GET]		用户请求的资源被永久删除,且不会在得到的.
422 Unprocesable entity-[POST/PUT/PATCH]当创建一个对象时,发生一个验证错误.
500 INTERNAL SERVER ERROR - [*]	服务器发生错误,用户无法判断发出的请求是否成功.

------------------------
错误处理(Error handling)
------------------------
如果状态码是4xx,就应该向用户返回出错信息.一般来说,返回的信息中将error作为键名,
出错信息作为键值即可.
{
	error:"Invalid API key"
}

--------
返回结果
--------
针对不同操作,服务器向用户返回的结果应该符合以下规范.
GET /collection			返回资源对象的列表(数组)
GET /collection/resource	返回单个资源对象
POST /collection		返回新生成的资源对象
PUT /collection/resource	返回完整的资源对象
PATCH /collection/resource	返回完整的资源对象
DELETE /collection/resource	返回一个空文档

--------------
Hypermedia API
--------------
RESTful API最好做到Hypermedia,即返回结果中提供链接,连向其他API方法,使得用户不
查文档,也知道下一步应该做什么.
比如,当向api.example.com的根目录发出请求,会得到这样一个文档.
{"link":{
	"rel":"collection https://www.example.com/zoos",
	"href":"https://api.example.com/zoos",
	"title":"List of zoos",
	"type":"appllication/vnd.yourformat+json"
}}

----
其它
----
API的什么认证应该使用OAuth 2.0框架.
服务器返回的数据格式,应该尽量使用JSON,避免使用XML.
==============================================================================
==============================================================================
==============================================================================
