==============================================================================
Go库中有两个包涉及到pprof工具
---------------
runtime/pprof
net/http/pprof
---------------
运行时的分析工具可以收集CPU 内存 Goroutine阻塞事件(block) 跟踪(trace)四种数据
运行时中的pprof工具是底层的分析工具,而网络包中的pprof只是将前者的进行内部封装,
并通过http端口的方式暴露出来.
==============================================================================
net/http/pprof使用
==================
如果分析的程序是Web服务器型的,只需要在入口文件中的引用包部分,在import中增加一
行 _ "net/http/pprof" 即可.这个时候比较方便的就是通过浏览器来查询Web服务器中代
码的各种运行情况.如果你的程序没有运行在http服务端口上,需要我们启动一个http服务
端口.
----------------
启动服务端口方法
----------------
1在import中添加"net/http"和"log"包
2在main函数中启动一个并行的监听日志服务端口
go func() {
	log.Println(http.ListenAndServe("localhost:6060",nil))
}()
----------
浏览器查询
----------
http://localhost:6060/debug/pprof/
----------
命令行查询
----------
**heap profile**
go tool pprof http://localhost:6060/debug/pprof/heap
**look at a 30-second CPU profile**
go tool pprof http://localhost:6060/debug/pprof/profile
**look at a the goroutine blocking profile**
go tool pprof http://localhost:6060/debug/pprof/block
**collect a 5-second execution trace**
wget http://localhost:6060/debug/pprof/trace?seconds=5
==============================================================================
runtime/pprof使用
=================
假如代码使用了Go testing包的基准支持,我们可以使用go test的标准标志-cpuprofile
和-memprofile.但是在一个单独的程序中我们需要添加包和额外的一些代码来完成代码的
分析数据.
-------------------
CPU数据收集代码添加
-------------------
1在import引用包中额外添加"runtime/pprof"和"log" "os" "flag"
2在独立程序中额外添加代码如下

var cpuprofile = flag.String("cpuprofile","","write cpu profile to file")

func main() {
	flag.Parse()
	if *cpuprofile != "" {
		f,err := os.Create(*cpuprofile)
		if err != nil {
			log.Fatal(err)
		}
		pprof.StartCPUProfile(f)
		defer pprof.StopCPUProfile()
}
....

--------------------
内存数据收集代码添加
--------------------
1在import引用包中额外添加"runtime/pprof"和"log" "os" "flag"
2在独立程序中额外添加代码如下

var memprofile = flag.String("memprofile","","write memory profile to this file")
....

func main() {
	....
	....
	if *memprofile != "" {
		f,err := os.Create(*memprofile)
		if err != nil {
			log.Fatal(err)
		}
		pprof.WriteHeapProfile(f)
		f.Close()
		return
	}
}

==============================================================================

--------------------
捕捉程序运行时间数据
--------------------
#xtime.sh

#!/bin/sh
/usr/bin/time -f '%Uu %Ss %er %MkB %C' "$@"

-------------------------------------------
#hello.go

package main

import "fmt"

func main() {
	for i:=0;i<10;i++ {
		for j:=0;j<100;j++ {
			fmt.Println(hello world)
		}
	}
}

------------------------------------------------
$go build hello.go
$./xtime.sh hello
-------------------
==============================================================================
对于pprof工具生成的各项指标分析数据有几种呈现方式
--------------------------------------------------
命令终端交互呈现
----------------

go tool pprof runbin runbinprofile

也可以通过在终端中的交互生成丰富的各种分析(cpu mem block trace)图像图表数据
例如,html pdf gv png jpg disasm web weblist dot 
	--------------------
	top[N]命令各自段含义
	--------------------
	1采样点落在该函数中的次数
	2采样点落在该函数中的百分比
	3上一项的累计百分比
	4采样点落在该函数,以及被它调用的函数中的总次数
	5采样点落在该函数,以及被它调用的函数中的总次数百分比
	6函数名

----------------
命令终端文本呈现
----------------

go tool pprof runbin --text runbinprofile

----------------
命令终端图表呈现
----------------

go tool pprof runbin --dot runbinprofile > heap.gv
dot -Tpng heap.gv > heap.png

------------------
浏览器直接浏览数据
------------------

http://localhost:6060/debug/pprof/

==============================================================================
pprof工具在交互模式下支持的命令
------------------------------------------------------------------------------
名称	参数		标签	说明
------------------------------------------------------------------------------
gv	[focus]			将当前概要文件以图形化和层次话的形式显示出来.
				当没有任何参数时概要文件中的所有抽样都会被显示
				如果指定参数,则只显示调用栈中与此参数相匹配的
				函数或方法的抽样.focus是一个正则表达式.
------------------------------------------------------------------------------
web	[focus]			和gv命令类似,web命令只是在一个Web浏览器中显示.
------------------------------------------------------------------------------
list	[routine_regexp]	列出名称与参数"routine_regexp"代表的正则表达式
				相匹配的函数或方法的相关源代码.
------------------------------------------------------------------------------
weblist	[routine_regexp]	和list命令类似,weblist命令的内容只是在浏览器中
				显示,在点击某行源码时还会显示相应的汇编代码.
------------------------------------------------------------------------------
top[N]			[--cum]	top命令可以以本地取样计数为顺序列出函数或方法
				及相关信息.如果存在标记--cum则以积累取样计数为
				顺序.默认top命令会列出前10项内容.但在top命令后
				紧跟一个数字,那么列出的项数就会与这个数字相同.
------------------------------------------------------------------------------
disasm	[routine_regexp]	显示名称与参数routine_regexp相匹配的函数或方法
				的反汇编代码.并且,在显示内容中还会标注有相应的
				取样计数.
------------------------------------------------------------------------------
callgrind  [filename]		利用callgrind工具生成统计文件.在这个文件中,说
				明了程序中函数的调用情况.如果未指定filename参
				数,则直接调用kcachegrind工具.kcachegrind可以以
				可视化的方式查看callgrind工具生成的统计文件.
------------------------------------------------------------------------------
help				显示帮助信息.
------------------------------------------------------------------------------
quit				退出go tool pprof命令.
------------------------------------------------------------------------------
==============================================================================
使用示例
========
需要测试的独立程序
------------------
#fib.go
package main
import "fmt"
fibonacci(num int) int {
	if num < 2 {
		return 1
	}
	return fibonacci(num - 1) + fibonacci(num - 2)
}
func main() {
	for i:=0;i<10;i++ {
		nums := fibonacci(i)
		fmt.Println(nums)
	}
}
-------------------------------------------
收集分析数据 改造后的文件
--------------------------
#fibonacci.go

package main

import (
        "flag"
        "fmt"
        "log"
        "os"
        "runtime/pprof"
)

var (
        cpuprofile = flag.String("cpuprofile", "", "write cpu profile to file.")
)

func fibonacci(num int) int {
        if num < 2 {
                return 1
        }
        return fibonacci(num-1) + fibonacci(num-2)
}

func main() {

        log.Println("begin")
        flag.Parse()

        if *cpuprofile != "" {
                f, err := os.Create(*cpuprofile)
                if err != nil {
                        log.Fatal(err)
                }
                pprof.StartCPUProfile(f)
                defer pprof.StopCPUProfile()
        }

        for i := 0; i < 30; i++ {
                nums := fibonacci(i)
                fmt.Println(nums)
        }
}
--------------------------------------
go build fibonacci.go
fibonacci -cpuprofile=profile
go tool pprof fibonacci profile
--------------------------------------

==========================
一个httpserver程序分析示例
==========================
sync包中的WaitGroup,WaitGroup总共有三个方法Add(delta int) Done() Wait()
Add:添加或者减少等待goroutine的数量.
Done:相当于Add(-1).
Wait:执行阻塞,知道所有的WaitGroup数量变为0.
--------------------------------------------
package main

import (
	"fmt"
	"sync"
	"time"
)

func main() {
	var wg sync.WaitGroup

	for i := 0; i < 5; i = i + 1 {
		wg.Add(1)
		go func(n int) {
			// defer wg.Done()
			defer wg.Add(-1)
			EchoNumber(n)
		}(i)
	}

	wg.Wait()
}

func EchoNumber(i int) {
	time.Sleep(3e9)
	fmt.Println(i)
}
---------
每次循环的数量过3秒钟输出,这个程序如果不用WaitGroup,那么将看不见输出结果.因为
goroutine还没执行完,主线程已经执行完毕.注释的defer wg.Done()和defer wg.Add(-1)
作用一样.原来执行脚本,都是使用time.Sleep,用一个估计的时间等到子线程执行完.
WaitGroup很好,虽然chanel也能实现，但是觉得如果涉及不到子线程与主线程数据同步,
这个就不错.但是其缺点是无法指定固定的goroutine数目.可通过使用channel解决问题。
---------------------
需要测试的程序server.go

package main

import (
        "flag"
        "log"
        "net/http"
        _ "net/http/pprof"	//需要加入的包
        "sync"
        "time"
)

func work(wg *sync.WaitGroup) {
        time.Sleep(time.Second)
        var counter int
        for i := 0; i < 1000; i++ {
                time.Sleep(time.Millisecond * 100)
                counter++
        }
        wg.Done()
}

func main() {
        flag.Parse()
	//这里实现了远程获取pprof数据的接口 需要添加的用于捕捉数据
        go func() {
                log.Println(http.ListenAndServe("localhost:6060", nil))
        }()

        var wg sync.WaitGroup
        wg.Add(10)
        for i := 0; i < 10; i++ {
                go work(&wg)
        }

        wg.Wait()
	//Wait to see the global run queue deplete.
        time.Sleep(3 * time.Second)
}
------------------
go build server.go
./server
==============================================================================
==============================================================================
