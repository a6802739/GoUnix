==============================================================================
Go语言的cgo
-------------
虽然Go语言的语法优美,但是作为一种静态的计算机语言,难免要同存在多年并且系统的编
程语言C/C++打交道,那么这个cgo工具提供了方便.
cgo作为一种桥梁,实现了Go和C语言的双向翻译.Go语言通过cgo来利用C语言,可以让Go语
言能够很好的同系统进行交互,这样让Go语言实现跨平台就变得很容易,如linux windows
darwin android ios.而C语言通过cgo来利用Go语言,将用Go语言编写的代码打包编译成我
们在各个平台上的动态链接库和静态库.
----------------
哪里涉及到了CGO?
----------------
runtime/cgo
这里面涉及到了import "C"及其上面需要我们对于编译导入C语言的翻译规则和编译C代码
的通用工具GCC的通用选项变量 C语言的头文件 扩展等等.主要是引入C语言时写Go代码的
语法规则.
cmd/cgo
这个是Go语言下的命令行工具中的cgo工具,这个不在Go语言的标准库中,主要是我们在使
用这两种语言对于在不同平台以及充分利用语言在各自领域进行自定义的一个过程.
unsafe
这个是Go语言标准库中的,C语言的内存是需要自己分配内存的,会造成内存泄漏,而GO语言
是运行时自行分配的,这个包unsafe是为了实现两种语言基本的字符类型转换,为什么说是
不安全的,如果知道shellcode是如何利用字符串内存溢出控制代码跳转,就知道C语言在不
进行内存检查是一个安全隐患.
------------------------------------------------------------------------------
C --> Go
---------
package rand

/*
#include <stdlib.h>
*/
import "C"

func Random() int {
	return int(C.random())
}

func Seed(i int) {
	C.srandom(C.uint(i))
}
需要注意
当引用Go语言引用C代码时,必须通过import "C"来告诉编译器我们编译时需要用到C语言
import "C"上面的注释也是需要有的并且位置不能改变
具体引用到C的代码的时候的形式是C.
在使用C语言的函数时有参数类型和返回参数类型,但是他的类型和Go语言的基本类型是不
同的,这样就需要将各自语言的基本类型进行封装成接口方便对应数据类型的使用.
C.random()返回了C语言的int类型,需要通过int()来将其转换为Go语言的类型.
C.uint(i)中的i是Go语言的基本类型,通过C语言的uint()将其转换为C语言的基本类型.
------------------------------------------------------------------------------
C --> Go unsafe
----------------
package print

//#include <stdio.h>
//#include <stdlib.h>
import "C"
import "unsafe"

func Print(s string) {
	cs := C.CString(s)
	C.fputs(cs,(*C.FILE)(C.stdout))
	C.free(unsafe.Pointer(cs))
}
需要注意的
unsafe就是将C语言返回的指针通过安全的转化的
C.free()是将C语言分配出的内存资源进行手动的回收
下面的代码更像是Go下的书写形式(利用defer)
func Print(s string) {
	cs := C.CString(s)
	defer C.free(unsafe.Pointer(cs))
	C.fputs(cs,(*C.FILE)(C.stdout))
}
==============================================================================
//#cgo CFLAGS:-DPNG_DEBUG=1
//#cgo amd64 386 CFLAGS:-DX86=1
//#cgo	LDFLAGS:-lpng
//#include <png.h>
import "C"

在import "C"上面注释中以#cgo开头后面的标志是控制C和C++编译器的行为的

//#cgo pkg-config: png cairo
//#include <png.h>
import "C"

通过pkg-config可以将png cairo同步到每一个C文件中去

//#cgo LDFLAGS: -L${SRCDIR}/libs -lfoo

可以使用全局变量进行替换${}

==============================================================================
字段名访问
C'S struct(type) field names(x) ---> x._type
--------------------------------------------
对应的基本类型
C.char	C.schar(signed char) C.uchar(unsigned char) C.short 
C.ushort(unsigned short) C.int C.uint(unsigned int) C.long 
C.ulong(unsigned long) C.longlong(long long) C.ulonglong(unsigned long long)
C.float C.double 
----------------------------------
任何数据类型的指针
C type void* ---> unsafe.Pointer
--------------------------------------
结构体 联合体 枚举
struct 	---> 	struct_
union 	--->	union_
enum	--->	enum_
-----------------------------
无返回值函数需要丢弃
n,err := Csqrt(-1)
_,err := C.voidFunc()
-----------------------------
C语言的指针其实是数组的第一个元素,在Go语言中应该是C.f(&C.x[0])
// Go string to C string
// The C string is allocated in the C heap using malloc.
// It is the caller's responsibility to arrange for it to be
// freed, such as by calling C.free (be sure to include stdlib.h
// if C.free is needed).
func C.CString(string) *C.char

// C string to Go string
func C.GoString(*C.char) string

// C string, length to Go string
func C.GoStringN(*C.char, C.int) string

// C pointer, length to Go []byte
func C.GoBytes(unsafe.Pointer, C.int) []byte
------------------------------------------------------------------------------
可以将Go语言中的函数导入到C代码中
---------------------------------
在Go语言中是这样的(//export必须要有,声明可被导出)

//export MyFunction
func MyFunction(arg1, arg2 int, arg3 string) int64 {...}

//export MyFunction2
func MyFunction2(arg1, arg2 int, arg3 string) (int64, *C.char) {...}

到C代码中是这样的

extern int64 MyFunction(int arg1, int arg2, GoString arg3);
extern struct MyFunction2_return MyFunction2(int arg1, int arg2, GoString arg3);

------------------------------------------------------------------------------
go tool cgo工具
将指定的Go源文件翻译输出成几个Go和C源文件
==============================================================================
==============================================================================
