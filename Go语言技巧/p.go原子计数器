==============================================================================
sync/atomic包在多个Go协程中进行原子计数。
----------------------------------------
package main

imprt (
	"fmt"
	"time"
	"sync/atomic"
	"runtime"
)

func main() {

	var ops uint64 = 0

	//为了模拟并发更新，启动了50个Go协程
	for i := 0; i < 50; i++ {
		go func() {
			for {

				//使用AddUint64来让计数器自动增加，使用&语法来
				//给出ops的内存地址
				atomic.AddUint64(&ops,1)

				//允许其它Go协程的执行
				runtime.Goshed()
			}
		}()
	}

	//等待一秒，让ops的并行自加操作执行一会儿
	time.Sleep(time.Second)

	//为了在计数器还在被其它Go协程更新时，安全的使用它，通过LoadUint64将
	//当前值拷贝提取到opsFinal中，需要给这个函数所取值的内存地址&ops。
	opsFinal := atomic.LoadUint64(&ops)
	fmt.Println("ops:",opsFinal)
}

==============================================================================
==============================================================================
