==============================================================================
常常需要在后面一个时刻运行Go代码，或者在某段时间间隔内重复运行。Go的内置定时器
和打点器特性让这很容易实现。
time.Sleep()用来进行单纯的等待。
time.NewTimer()这个就是一个定时器，它表示在未来某一时刻的独立事件，它将提供一
个用于通知的通道。
time.NewTimer().C这个是定时器的通道。
<-time.NewTimer().C用于定时器的通道在明确发送了定时器失效之前将一直阻塞。
time.NewTimer().Stop()用于在定时器失效之前（即通道发送通知之前）取消这个定时器
----------------------------
package main

import (
	"time"
	"fmt"
)

func main() {
	//定时器表示在未来某一时刻的独立事件。告诉定时器需要等待的时间，然后
	//它将提供一个用于通知的通道。
	time1 := timeNewTimer(time.Second * 2)
	//直到这个定时器的通道C明确的发送了定时器失效的值之前，将一直阻塞。
	<-timer1.C
	fmt.Println("Timer 1 expired")

	//定时器失效之前可以取消这个定时器
	timer2 := time.NewTimer(time.Second)
	go func() {
		<-timer2.C
		fmt.Println("Timer 2 expired")
	}()
	stop2 := timer2.Stop()
	if stop2 {
		fmt.Println("Timer 2 stopped")
	}
}
==============================================================================
==============================================================================
