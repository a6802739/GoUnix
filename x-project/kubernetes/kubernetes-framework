==============================================================================

架构和组件


-----------------------------------------------------------------------------


                 +--------------------------------------+
                 |主控节点(Master)                      |            外部网络
+----+           |+---------+ +---------+ +------------+|                  |
|Etcd|<--------->||Scheduler| |apiserver| |控制器管理器||                  |
+----+           |+---------+ +---------+ +------------+|                  |
  ^              +-----|-----------|------------|-------+           防火墙<'
  |                    |           |            |                     |
  |                    >           >            >                    <'
  |   +---------------------------------------------------------------------+
  |   |从属节点群                                                           |
  |   |   +--------------+       +--------------+        +--------------+   |
  |   |   |   从属节点   |       |   从属节点   |        |   从属节点   |   |
  |   |   |--------------|       |--------------|        |--------------|   |
  |   |   | +----------+ |       | +----------+ |        | +----------+ |   |
  |   |   | |kube-proxy| |       | |kube-proxy| |        | |kube-proxy| |   |
  --->|   | |----------| |       | |----------| |        | |----------| |   |
      |   | |   pod    | |       | |   pod    | |        | |   pod    | |   |
      |   | |          | |       | |          | |        | |          | |   |
      |   | |container | |       | |container | |        | |container | |   |
      |   | |container | |       | |container | |        | |container | |   |
      |   | +----------+ |       | +----------+ |        | +----------+ |   |
      |   +--------------+       +--------------+        +--------------+   |
      +---------------------------------------------------------------------+
                                 kubernetes的架构

在kubernetes集群中,主要包含主控节点(Master)和从属节点(Minion),前者负责整个集群
的管理工作,后者是集群的工作节点群.

------------------------------------------------------------------------------

主控节点


主控节点包含apiserver,调度器(Scheduler)和控制管理器(Controller Manager).


1 apiserver


在apiserver中,定义了诸多kubernetes的核心对象以及它们的操作.

核心对象:

Pod注册表(Pod Registry),控制器注册表(Controller Registry),
服务注册表(Service Registry),端点注册表(Endpoint Registry),
从属注册表(Minion Registry),绑定注册表(Binding Registry).


主控节点处理客户端请求流程:

                               +----------------------+
                               |       kubectl        |
                               +----------------------+
                                          |
                               +----------------------+
           ------------------->|    kubelet client    |
           |                   +----------------------+
           |                              |
  +-----------------+          +----------------------+
  |调度器(Scheduler)|          |       apiserver      |
  +-----------------+          +----------------------+
           |                              |
           |                   +----------------------+
           ------------------->|     REST存储API      |
                               +----------------------+
                                          |
                               +----------------------+
                               |      Etcd存储        |
                               +----------------------+
              主控节点处理客户端请求的流程

(1)kubectl将用户命令发送给kubernetes客户端.
(2)kubernetes客户端将请求发送给apiserver.
(3)apiserver根据请求类型,选择具体的REST存储API对请求进行处理.
   例如:创建Pod,那么则是Pod Registry存储,并将该值存储于Etcd中.
(4)在apiserver响应请求之后,调度器会去kubernetes客户端收集从属节点的节点信息以
   及Pod信息.
(5)根据所收集的信息,调度器将新建的Pod分发到合适的从属节点上.


在apiserver的存储库中,存储着kubernetes的各种核心对象信息,它们是一个个注册表.


从属注册表:负责跟踪集群中的从属节点信息.kubernetes将节点注册表的信息封装成为以
           RESTful形式并提供API,通过这些API可以创建和删除从属节点.Scheduler根
           据从属节点信息决定是否将新的Pod分配到该节点.

Pod注册表:记录集群中的Pod信息以及Pod和从属节点的映射关系.通过REST接口,可以对Pod
          进行创建(Create),获取(Get),列出(List),更新(Update)和删除(Delete)等操
          作.此外,可以通过watch接口监听Pod的事件,例如创建,删除等.

服务注册表:负责跟踪集群中所有服务的信息.通过REST接口,可以对服务进行创建,获取,
           列出,更新和删除等操作.此外,也可以通过watch接口设置事件监听,监听服务
           的变更事件.

控制器注册表:负责跟踪集群中所有的控制器,例如备份控制器(Replication Controller)
             的信息.通过REST接口,可以对控制器进行创建,获取,列出,更新和删除等操
             作.此外,还可以通过watch接口监听控制器的事件.

端点注册表:负责收集服务的端点信息.一个服务可以和多个端点关联,每一个端点就是集
           群中提供该服务的从属节点.通过REST接口,可以对该表项进行创建,获取,列
           出,更新,删除和监视操作.

绑定注册表:它是记录Pod和节点之间绑定关系的表,只有创建操作.


2 调度器


他负责收集和分析当前kubernetes集群中所有从属节点的资源使用情况,并为新建的Pod分
配资源.调度器会实时监控kubernetes集群中未分发的Pod,同时实时追踪集群中所有运行
的Pod,根据这些Pod的资源使用状况,为尚未分发的Pod选择一个最为合适的从属节点.一旦
将某个Pod分配到某个从属节点,那就意味着这个节点的资源被占用,这部分资源就不可能
再分配给其他Pod,除非该Pod被回收.在将Pod分发到指定从属节点后,调度器会把Pod的信
息写回到apiserver.


3 控制器管理器


kubernetes的控制器有端点控制器(Endpoint Controller)和备份控制器(Replication 
Controller).端点控制器主要保证服务和Pod之间的映射关系是最新的.例如当Pod失效时,
则应该及时更新服务与它的映射,将它从服务的映射列表中去除.当有新的符合条件的Pod
加入到一项服务时,需要更新服务的端点信息.备份控制器用于控制Pod的备份,解决Pod的
扩容问题.分布式应用处于提升服务性能和容错性等考虑,需要复制多份资源并根据负载而
动态增加或者减少.当某项服务的某个Pod因为异常而宕机时,备份控制器在检测到该事件
发生后,会立即新建一个该服务的Pod,以保证服务质量.

备份控制器只要用法:

调度:备份控制器会保证指定Pod的指定副本数量在运行,当节点异常退出时,立即新建Pod
     副本进行替换.

扩容缩容:根据需要动态增加或减少Pod数量.

逐步更新:某项服务需要更新时,可以对一个个的Pod进行升级更新.

应用的多分支跟踪:一个应用可以有多个分支,并且在集群中可以同时运行多个分支,而分
                 支之间通过标签来识别.

------------------------------------------------------------------------------

从属节点


从属节点是kubernetes集群中真正工作的节点.除了包含Pod外,还有用于管理和通信的基
础设施,主要是kubelet组件和服务代理.


1 kubelet

kubelet主要负责管理Pod及容器,以及与apiserver通信.他接收来自主控节点的apiserver
组件发来的命令和任务,并与Etcd,http等服务交互.kubelet包含Docker客户端,根目录,
Pod Worker,Etcd客户端,Cadvisor客户端以及Health Checker组件.

kubelet具体工作:

 通过Pod Worker给Pod分配任务.

 同步Pod的状态.

 从Cadvisor获取容器,Pod,宿主主机信息.

 管理Pod容器,包括运行一个指定的容器,创建网络容器,给容器绑定数据卷和端口,杀死和
 删除容器以及在容器中运行命令.


2 服务代理

每生成一种服务,代理都会从Etcd中获取该服务端点列表信息,然后根据配置设置iptables
规则,对服务请求进行重定向.

------------------------------------------------------------------------------


==============================================================================
==============================================================================
