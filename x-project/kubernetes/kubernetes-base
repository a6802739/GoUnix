==============================================================================

kubernetes简介


kubernetes为容器化应用提供资源调度,部署,服务发现,扩展机制等功能.
kubernetes可以被部署在物理集群和各类云环境中.

 使用Docker对应用进行打包,实例化和运行.
 以集群的方式运行和管理跨主机的容器.
 解决跨主机容器的通信问题.
 提供自我修复功能,保证系统运行的健壮性.

==============================================================================

kubernetes核心


kubernetes的核心包括节点(Node),Pod,服务(Service),卷(Volume),标签(Label)和备份
控制器(Replication Controller).

--------------------------------------

节点:


节点是kubernetes系统中的一台工作机器,常被称为Minion,他可以是物理机,也可以是虚
拟机.每一个节点都包含Pod运行所需的必要服务,如Docker,kuberlet和网络代理(proxy).
节点受kubernetes系统中的主节点控制.节点本身并不属于kubernetes的概念,他是云平台
中的虚拟机或者实体机.所以,当一个节点加入到kubernetes系统中时,他将会创建一个数
据结构来记录该节点的信息.只有通过验证的节点才能够加入到kubernetes系统中最终成
为kubernetes的节点.


节点的两种管理方式:节点管理器(Node Controller)和通过命令手动管理.


节点管理器:

它是kubernetes主控节点上管理集群节点的组件,主要包含两个功能:集群节点的同步和单
个节点生命周期的管理.当有节点加入到kubernetes中时,节点管理器将会创建节点信息;
当有节点需要从kubernetes中删除时,节点管理器则会删除该节点的节点信息.需要注意的
是,节点管理器仅仅创建节点的元数据,用于跟踪节点的状态,节点上的服务需要用户自己
安装.

手动管理节点:

kubernetes的管理员可以通过kubectl命令来管理节点.
使用kubectl命令创建和删除节点时,也只是删除节点的配置信息.

-----------------------------------------------------------

Pod


在kubernetes中,Pod是最小的可创建,调度和管理的部署单元.它是容器化环境中的"逻辑
主机",可以包含一个或多个有关联的容器,并且容器之间可以共享数据卷.
容器存在于Pod之中,而Pod又存在于节点之中.

例如:
一个Web站点应用由前端,后端和数据库组成,这三个组件运行的各自的容器中,可以创建包
含这三个容器的Pod.

为什么需要抽象出Pod这个概念?

1 资源共享和通信:同一Pod中的容器拥有相同的网络命名空间,IP地址和端口区间,它们之
间可以直接用localhost来发现和通信.在无层次的共享网络中,每个Pod都有一个IP地址,
用于跟其它物理主机和容器进行通信,Pod的名字也被用作主机名.同一Pod的容器可以共享
数据卷.

2 管理:从管理的角度来看,Pod比容器站在更高的层面,他简化了应用的部署和管理.Pod可
以自动处理主机托管,资源共享,协调复制和依赖管理等问题.

Pod的具体用例:

 内容管理系统,文件和数据的装载和本地缓存管理等.
 日志和检出点备份,压缩,轮换和快照.
 数据变更监控,日志末端数据读取,日志和监控适配器和事件打印.
 代理,桥接和适配器.
 控制器,管理器,配置编辑和更新.

---------------------------------------------

服务


kubernetes的服务是一系列Pod以及这些Pod的访问策略的抽象.


==============================================================================
==============================================================================
