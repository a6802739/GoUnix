==============================================================================
使用Dockerfile文件来创建镜像
============================

将需要对镜像进行的操作全部写到一个文件中,然后使用docker build命令从这个文件中
创建镜像.这种方法可以使镜像的创建变得透明和独立化,并且创建过程可以被重复执行.

Dockerfile文件以行为单位,行首为Dockerfile命令,命令都是大写形式,其后紧跟着的是
命令的参数.

Dockerfile文件中的命令:
------------------------------------------------------------------------------
FROM	指定待扩展的父级镜像.除了注释外,在文件的开头必须是一个FROM指令,接下来
	的指令便在这个父级镜像中运行,直到遇到下一个FROM指令.通过添加多个FROM命
	令,可以在同一个Dockerfile文件中创建多个镜像.
------------------------------------------------------------------------------
MAINTAINER	用来声明创建的镜像的作者信息.这个命令并不是必需的.
------------------------------------------------------------------------------
RUN	用来修改镜像的命令,常用来安装库,程序以及配置程序.该命令会在当前镜像上
	创建一个新的镜像层,接下来的命令会在新的镜像上继续执行.
------------------------------------------------------------------------------
EXPOSE	用来指明容器内进程对外开放的端口,多个端口之间使用空格隔开.
------------------------------------------------------------------------------
ADD	向新的镜像中添加文件,这个文件可以是一个主机文件,也可以是网络文件,也可
	以是一个文件夹.
	ADD命令的第一个参数用来指定源文件(夹).注意,如果是文件或文件夹,他必须是
	相对Dockerfile所在目录的相对路径.如果是一个网络url文件,在创建镜像时,会
	先下载下来,然后在添加到镜像里去.
	ADD命令的第二个参数是文件需要放置在目标镜像的位置.
	如果源文件是主机上zip或者tar形式的文件,Docker会先解压缩,然后将文件添加
	到镜像的指定位置.
	如果源文件是一个通过URL指定的网络压缩文件,则不会解压.
------------------------------------------------------------------------------
VOLUME	该命令会在镜像里创建一个指定路径(文件或文件夹),这个路径可以来自主机或
	者其它容器.多个容器可以通过同一个挂在点共享数据,即便其中一个容器已经停
	止,挂在点仍然可以访问,只有当挂载点的容器引用全部消失时,挂载点才会自动
	删除.
------------------------------------------------------------------------------
WORKDIR	为接下来执行的指令指定一个新的工作目录,这个目录可以是绝对目录,也可以是
	相对目录.根据需要,WORKDIR可以被多次指定.当在启动一个容器时,最后一条的
	WORKDIR指令所指的目录作为容器运行的当前工作目录.
------------------------------------------------------------------------------
ENV	设置容器运行的环将变量.
------------------------------------------------------------------------------
ENTRYPOINT	用来指定容器启动时默认运行的命令.
------------------------------------------------------------------------------
CMD		用来设置启动容器时默认运行的命令.
------------------------------------------------------------------------------
USER	为容器的运行及接下来RUN,CMD,ENTRYPOINT等指令的运行指定用户或UID.
------------------------------------------------------------------------------
ONBUILD	触发器指令.构建镜像的时候,docker的镜像构建器会将所有的ONBUILD指令指定
	的命令保存到镜像的元数据中,这些命令在当前镜像的构建过程中并不会执行.
	只有新的镜像使用FROM指令指定父镜像时,便会触发执行.
-----------------------------------------------------------------------------

==============================================================================

RUN apt-get update
RUN ["apt-get"',"update"]

CMD ls -l -a 
CMD ["ls","-l","-a"]

第一种形式是在/bin/sh环境中执行指定的命令.
第二种形式是直接使用系统调用exec来执行.
这其实是和Go语言的底层设计相关的.

RUN apt-get update && apt-get install -y nginx

RUN apt-get update \
	&& apt-get install -y nginx \
	&& echo "hello world"

---------------------------------------------

CMD和ENTRYPOINT的使用:

通常情况下,会将CMD和ENTRYPOINT搭配起来使用.
ENTRYPOINT用于指定需要运行的命令.
CMD用于指定运行命令所需要的参数.

如下:
ENTRYPOINT ["ls"]
CMD ["-a"],"-l"]

---------------------------------

FROM和ONBUILD的使用:

ONBUILD ADD . /app/src
ONBUILD RUN echo "on build excuted" >> onbuild.txt

使用FROM以Dockerfile文件构建出的镜像为父镜像,构建子镜像时将自动执行
ADD . /app/src和RUN echo "on build excuted" >> onbuild.txt操作.

-------------------------------------------------------------------

构建镜像:
docker build -t containername:tag .
最后的参数是Dockerfile文件所在的相对目录,这里使用的是当前目录.

==============================================================================
==============================================================================
