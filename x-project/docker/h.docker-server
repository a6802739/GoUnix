==============================================================================

Docker后台监听接口

Docker是由Docker后台和客户端组成的,而在默认配置下,Docker后台只接受来自本机的
root用户的请求.事实上,Docker后台默认监听的是unix:///var/run/docker.sock套接字文
件,该文件位于/var/run/目录下,如果想改变Docker后台的监听端口,甚至让其它主机也能
够访问该后台服务,可以通过-H参数设置.

通过-H参胡,可以让Docker后台监听指定的IP和端口.
-H接受IP和端口绑定的格式为: tcp://[host][:port] 或 unix://path

Docker后台同时接受多个端口的绑定:
docker -H tcp://127.0.0.1:2376 -H unix:///var/run/docker.sock -d &

注意:在改变Docker后台监听的端口需要先停止Docker后台,如
service docker stop 或 systemctl stop docker.service

除了使用命令行启动Docker后台外,一种更为持久化和自动化的方法是修改Docker后台的
启动脚.debian系统中为/etc/default/docker.如,
DOCKER_OPTS="-H 0.0.0.0:2376 -H unix:///var/run/docker.sock"

-------------------------------------------------------------

远程Docker-server的API测试:

停止Docker-server后台
systemctl stop docker.service

以监听本地端口为2376的TCP协议的方式启动Docker-server.
docker -H tcp://127.0.0.1:2376 -d &

使用curl工具来测试
curl -X GET http://localhost:2376/version
curl -X GET http://localhost:2376/info

-----------------------------------------------

Docker的容器和镜像相关的API


容器相关的API都在/containers/路径下面,镜像相关的API都在/images/路径下面.


-------------------------------容器相关的API----------------------------------
功能			方法				参数
------------------------------------------------------------------------------
列出容器		GET /container/json		all limit等
创建容器		PSOT /container/create		name JSON等
查看信息		GET /container/(id)/json	
正在运行的进程		GET /container/(id)/top		
获取日志		GET /container/(id)/logs	follow stdout stderr等
查看文件变更		GET /container/(id)/changes	
导出			GET /container/(id)/export
启动			POST /container/(id)/start	
停止			POST /container/(id)/stop	t
重启			POST /container/(id)/restart	t
杀死			POST /container/(id)/kill	signal
附加终端		POST /container/(id)/attach	logs stin stdout等
暂停			POST /container/(id)/pause	
重新运行暂停的容器	POST /container/(id)/unpause	
等待容器停止		POST /container/(id)/wait	
删除			DELETE /container/(id)		v force
从容器复制目录/文件	POST /container/(id)/copy	
------------------------------------------------------------------------------


-------------------------------镜像相关API------------------------------------
功能			方法				参数
------------------------------------------------------------------------------
列出镜像		GET /images/json		all filters
创建(下载创建)镜像	POST /images/create		formImage repo tag等
查看镜像信息		GET /images/(name)json		
获取镜像历史		GET /images/(name)/history	
推送镜像到仓库		POST /images/(name)/push	
给镜像贴标签		POST /images/(name)/tag		repo force tag
删除镜像		DELETE /images/(name)		force
搜索镜像		GET /images/search		Term
------------------------------------------------------------------------------


==============================================================================

通过curl命令来访问API的操作相对简单,根据API的规范性,会按照方法,用例请求,用例返
回,请求参数,返回的状态码以及curl操作这个标准模板的形式来逐个说明API.

这些用例实际上是Docker官方的API文档.

----------------------

方法:
用例请求:
用例返回:
请求参数:
返回的状态码:
curl操作:

----------------------

1 列出容器


方法: GET  /container/json

用例请求: GET /containers/json?all=1&before=8dfafdbc3a40&size=1 HTTP/1.1

用例返回: 

HTTP/1.1 200 OK
Content-Type: application/json

[
     {
             "Id": "8dfafdbc3a40",
             "Names":["/boring_feynman"],
             "Image": "ubuntu:latest",
             "Command": "echo 1",
             "Created": 1367854155,
             "Status": "Exit 0",
             "Ports": [{"PrivatePort": 2222, "PublicPort": 3333, "Type": "tcp"}],
             "Labels": {
                     "com.example.vendor": "Acme",
                     "com.example.license": "GPL",
                     "com.example.version": "1.0"
             },
             "SizeRw": 12288,
             "SizeRootFs": 0
     },
     {
             "Id": "9cd87474be90",
             "Names":["/coolName"],
             "Image": "ubuntu:latest",
             "Command": "echo 222222",
             "Created": 1367854155,
             "Status": "Exit 0",
             "Ports": [],
             "Labels": {},
             "SizeRw": 12288,
             "SizeRootFs": 0
     },
     {
             "Id": "3176a2479c92",
             "Names":["/sleepy_dog"],
             "Image": "ubuntu:latest",
             "Command": "echo 3333333333333333",
             "Created": 1367854154,
             "Status": "Exit 0",
             "Ports":[],
             "Labels": {},
             "SizeRw":12288,
             "SizeRootFs":0
     },
     {
             "Id": "4cb07b47f9fb",
             "Names":["/running_cat"],
             "Image": "ubuntu:latest",
             "Command": "echo 444444444444444444444444444444444",
             "Created": 1367854152,
             "Status": "Exit 0",
             "Ports": [],
             "Labels": {},
             "SizeRw": 12288,
             "SizeRootFs": 0
     }
]

请求参数:

1 all:其值为1/True/true或0/False/false,表示是否显示所有容器.其值若为真,则会显
      示所有容器,其中包含已经停止的容器,否则只显示正在运行的容器.其默认值为0.

2 limit:仅显示最新建立的几个容器.

3 since:显示比指定Id的容器更晚创建的容器.

4 before:显示比指定Id的容器更早创建的容器.

5 size:其值为1/True/true或者0/False/false,表示是否显示容器的大小.

6 filters:使用JSON格式的条件过滤容器,例如退出码(exited=<int>),status运行状态
          (status=restarting|running|paused|exited).

返回的状态码:

 200:返回正常.

 400:参数错误.

 500:服务器错误.

curl操作:

 curl -X GET http://localhost:2376/containers/json?all=1

----------------------------------------------------------

其它的API和这个用例差不多,如有需要可到官方文档处进行检索.

==============================================================================
==============================================================================
