==============================================================================

命名空间


Linux的命名空间对虚拟化提供了轻量级的支持,通过他我们可以完全隔离不同的进程.

在Linux及其他类UNIX系统中,很多资源都是全局的,包括进程号(Pid),用户信息,系统信息
网络接口和文件系统等.

所有的进程都在同一个系统上运行,需要隔离的各种资源则通过命名空间达到隔离的目的.
这样就可以把一些进程放到一个容器中,另一些进程放到另一个容器中,两个容器之间互相
隔离.当然,也可以根据需要允许容器间有一定的共享.例如,容器使用独立的PID集合,但是
和其它容器共享文件系统.

本质上,命名空间提供了对资源的不同视图,在不同的命名空间下我们会看到不同的资源集
合.之前的每一向全局资源都被封装到容器的数据结构中.只有资源和包含资源的命名空间
构成的组合是全局唯一的.

------------------------------------------------------

六种不同的命名空间:



1 进程命名空间(PID Namespace)[CLONE_NEWPID]:


空间内的PID是独立分配的,意思就是命名空间内的虚拟PID可能会与命名空间外的PID相冲
突,于是命名空间内的PID映射到命名空间外时会使用另外一个PID.比如说,命名空间内第
一个PID为1,而在命名空间外就是该PID已被init进程所使用.


2 进程间通信命名空间(IPC Namespace)[CLONE_NEWIPC]:


为了实现进程间的通信,Linux会使用全局的IPC对象,而所有的进程都可以见到这些IPC对
象.IPC命名空间就是为了隔离这些进程间的通信资源的.

进程间通信(IPC)的命名空间,可以将SystemV的IPC和POSIX的消息队列独立出来.

PID命名空间和IPC命名空间可以组合起来一起使用,这样新创建的命名空间既是一个独立
的PID空间,又是一个独立的IPC空间.不同命名空间的进程彼此不可见,也不能相互通信,
这样就实现了进程组的隔离.


3 网络命名空间(Network Namespace)[CLONE_NEWNET]:


网络命名空间,用于隔离网络资源(/proc/net IP地址 网卡 路由等).后台进程可以运行在
不同命名空间内的相同端口上,用户还可以虚拟出一块网卡.

该命名空间为进程提供了一个完全独立的网络协议栈的视图,包括网络设备接口,IPv4以及
IPv6协议栈,IP路由表,防火墙规则和sockets等.网络命名空间提供了一份独立的网络环境
就跟一个独立的系统一样.


4 挂载命名空间(Mount Namespace)[CLONE_NEWNS]:


挂载命名空间,进程运行时可以将挂载点与系统分离,使用这个功能时,可以达到chroot的
功能,而在安全性方面比chroot更高.

挂载命名空间为进程提供了一个文件层次视图,每个进程都存在与一个挂载命名空间里.
默认情况下,子进程和父进程将共享同一个挂载命名空间,其后子进程用mount或umount将
会影响到所有该命名空间内的进程.如果子进程在一个独立的挂载命名空间里,就可以调用
mount或umount命令建立一个新的文件层次视图.这样的话,不同的容器就拥有独立的文件
系统了.


5 UTS命名空间(UNIX Time-sharing System Namespace)[CLONE_NEWUTS]:


UTS命名空间,主要目的是独立出主机名和网络信息服务(NIS).

该命名空间主要用来管理主机名和域名.每个UTS命名空间都可以定义不同的主机名和域名
通过配置独立的UTS命名空间,就可以虚拟出一个有独立主机名和网络空间的环境.

默认情况下,Docker容器的主机名就是容器id.


6 用户命名空间(User Namespace)[CLONE_NEWUSER]:


用户命名空间,同进程ID一样,用户ID和组ID在命名空间内外是不一样的,并且在不同命名
空间内可以存在相同的ID.这样就可以在容器中自由添加用户和组,却不影响宿主机和其它
容器上的用户和组.


------------------------------------------

cgroups(control groups)控制组(资源控制)

cgroups是Linux内核提供的一种可以记录,限制,隔离进程组(process group)所使用的物
理资源(如CPU 内存 I/O等)的机制.cgroups也是容器为实现虚拟化使用的资源管理手段.
可以说没有cgroups,就没有容器.

cgroups最初的目标是为资源管理提供一个同一的框架,既整合现有的cpuset等子系统,也
为未来开发新的子系统提供接口.现在的cgroups适用于多种应用场景,从单个进程的资源
控制到实现操作系统层次的虚拟化(OS Level virtualization).

控制组是Linux容器机制的另外一个关键组件,负责实现资源的审计和限制.他提供了很多
有用的特性,确保各个容器可以公平地分享主机的内存,CPU,磁盘I/O等资源.当然,更重要
的是,控制组确保了当容器内的资源使用产生压力时,不会连累主机系统.


cgroups提供的功能:

1 限制进程组可以使用的资源数量(Resource limiting)

比如,memory子系统可以为进程组设定一个memory使用上限,一旦进程组使用的内存达到限
额再申请内存,就会出现OOM(Out Of Memory).

2 进程组的优先级控制(Prioritization)

比如,可以使用cpu子系统为某个进程组分配特定CPU占有率.

3 记录(Accounting)进程组使用的资源数量

比如,可以使用cpuacct子系统记录某个进程组使用的CPU时间.

4 进程组隔离(Isolation)

比如,使用命名空间子系统,可以使不同的进程组使用不同的命名空间,以达到隔离的目的,
不同的进程组有各自的进程,网络,文件系统挂载空间.

5 进程组控制(Control)

比如,使用freezer子系统可以将进程组挂起和恢复.

-------------------------------------------------------

The UNIX Time-Sharing System是Dennis M. Ritchie and Ken Thompson在1974年发表
的关于UNIX的文件系统和Shell的工作原理.这些为UNIX的设计产生了深远的影响.

==============================================================================
==============================================================================
