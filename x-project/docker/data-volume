==============================================================================

数据卷的作用:

数据卷是一个可供一个或多个容器使用的特殊目录.
1 绕过"拷贝写"系统,以达到本地磁盘I/O性能.
2 绕过"拷贝写"系统,有些文件不需要在docker commit的时候打包进镜像中.
3 在多个容器之间共享目录.
4 在宿主和容器之间共享目录.
5 在宿主和容器之间共享单个文件.

-------------------------------------------------------

创建数据卷:

在Dockerfile文件中	VOLUME /opt/data

在docker run启动中	使用-v参数来创建数据卷并将其挂载在容器中

docker run -d -P -v /webapp ubuntu python app.py

-----------------------------------------------------------------

挂载主机目录作为数据卷:

docker run -d -P --name webapp -v `pwd`:/webapp ubuntu python app.py

指定宿主主机上的某个目录作为数据卷时,目录不能使用相对路径,只能使用绝对路径.

注意: /webapp目录映射到用户目录下面了

通过挂载本地目录到容器的数据卷,宿主主机对目录内的改变会同步反映到容器中,反过来
也一样.可以利用这种方法把本地的一些数据复制到挂载目录下,提供给容器处理.容器也
可以将处理结果写到该目录下,方便本地用户查看.

需要注意的是,Dockerfile文件并不支持挂载目录到数据卷,这主要因为不同操作系统的目
录格式不尽相同.为了保证Dockerfile的移植性,不支持挂载本地目录到数据卷.

-----------------------------------------------------------------------

挂载主机文件作为数据卷:

docker run -it -v ~/docker/test.txt:/test.txt ubuntu:latest /bin/bash

-----------------------------------------------------------------------

数据卷容器:

数据卷容器是指一个专门用于挂载数据卷的容器,以供其他容器引用和使用.
他主要用在多个容器需要从一处获得数据时.
在实际操作中,需要将数据卷容器命名.有了确定的容器名之后,对他有依赖关系的其它容
器就可以通过--volumes-from引用他的数据卷.

例子:

1 先建立一个数据卷容器,名为dbdata,并未该容器新建数据卷/dbdata.
docker run -d -v /dbdata --name dbdata ubuntu
这里-v参数只有一个目录,没有映射,此为该容器的目录.
2 接着创建一个容器db1,他引用dbdata的数据卷.
docker run -d --volume-from=dbdata --name db1 ubuntu
3 让多个容器引用,新建一个容器db2,他也引用dbdata容器的数据卷.
docker run -d --volume-from=dbdata --name db2 ubuntu
4 可以级联引用,新建一个容器db3,他引用db1容器的数据卷.
docker run -d --name db3 --volumes-from=db1 ubuntu

注意:无论是声明数据卷的容器还是后续引用数据卷的容器,容器的停止和删除都不会导致
数据卷本身删除.如果需要删除数据卷,那么需要删除所有依赖他的容器,并且在删除最后
一个依赖容器是加入-v标志.


假如dbtata db1 db2都已经删除了,那么删除db3的时候加上-v参数,就可以删除数据卷.

docker rm -v db3

此时可以检查一下/var/lib/docker/vfs/dir目录下就没有该数据卷对应的目录了.

---------------------------------------------------------------------------

利用数据卷进行数据的备份与恢复


备份:

docker run -d -v /dbdata --name dbdata mysql

容器运行时将数据都保存在了/dbdata

docker run --volume-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata

通过ubuntu镜像新建了一个容器,他引用了dbdata容器的数据卷,并创建一个数据卷映射,
将本地文件系统的当前工作目录映射到容器的/backup目录.通过tar命令将/dbdata目录
打包到/backup数据卷中,而该数据卷又因映射到了本地,所以dbdata容器的数据卷内的数
据就保存到了本地的当前目录.文件名为backup.tar



恢复数据:

先声明一个需要恢复的数据容器

docker run -v /dbdata --name dbdata2 ubuntu /bin/bash
ubuntu镜像创建名为dbdata2的容器,该容器还创建了数据卷/dbdata

利用另一个引用他的容器来关联到本地目录,并将本地的数据解压进数据卷中去.

docker run --volumes-from dbdata2 -v $(pwd):/backup busybox tar xvf /backup/backup.tar
该命令使用busybox镜像创建一个容器,该容器引用dbdata2的数据卷,并且也创建了另一个
数据卷/backup,/backup被映射到本地文件系统中的当前目录.本地的当前目录存在有
backup.tar压缩包,然后通过tar解压到/dbdata数据卷下,这样就把备份的数据重新恢复到
容器内部.
起初,你理解的时候可能有些困难,但是只要知道卷是一种映射关系就好理解了.
==============================================================================
==============================================================================
