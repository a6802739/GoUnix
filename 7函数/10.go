//defer语句定义函数延迟执行
package main

import(
	"fmt"
)

func main(){
	f1()
	f2()
	fmt.Printf("\n")
	fmt.Println(f3())
}
//一个延迟执行的函数的变量的值在声明延迟时别赋值
func f1(){
	i:=0
	defer fmt.Println(i)
	i++
	return
}
//被延迟的函数按照先进后出的顺序执行
func f2(){
	for i:=0;i<4;i++ {
		defer fmt.Printf("%d",i)
	}
}
//被延迟的匿名函数会读取函数f3的返回值，或对f3的返回值赋值。
func f3()(i int){
	defer func(){
		i++
	}()
	return 1
}
/**********************************************
在Go语言中，defer语句的作用是不管程序时候出现异常，均在
函数退出时自动执行相关代码。
func main(){
	defer fmt.Println("The first.")
	fmt.Println("The second.")
}
首先输出"The second."，然后才输出"The first."。
**********************************************/

/**********************************************
如果程序中有多个defer语句，则按照”先进后出（FIFO）“的次序
执行，即最后一个defer语句将最先被执行。
func main(){
	for i:=0;i<5;i++{
		defer fmt.Println(i)
	}
}
输出结果为：4,3,2,1,0。
*********************************************/

/*********************************************
在Go语言中，defer语句还支持匿名函数调用，如果函数有返回
值，被延迟执行的匿名函数还会读取函数的返回值，并对返回值
赋值。
*********************************************/