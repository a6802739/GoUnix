=============================================================================
命令替换的命令是反引号（`...`），但所有的新脚本程序都应该使用$(...)形式，
引入这一形式的目地是为了避免在使用反引号执行命令时，处理其内部的$ ` \等
字符所需要应用的相当复杂的规则。

如果需要把一条命令在标准输出上的输出转换为一组参数，并且将它们用做为另一个
程序的参数，你会发现命令xargs可以帮你完成这一工作。

expr命令，通过它可以处理一些简单的算术命令。一种更新更好的办法是使用$((...))
扩展。把你准备求值的表达式括在$((...))中能够更有效地完成简单的算术运算。
=============================================================================
参数扩展
========
假设你想编写一个简短的脚本程序，来处理名为1_tmp和2_tmp的两个文件。
你可能会写：（错误）
#!/bin/bash
for i in 1 2
do 
	my_secret_process $i_tmp
done
为了保护变量名中类似与$i部分的扩展，你需要把i放在花括号中，正确如下：
#!/bin/bash
for i in 1 2
do 
	my_secret_process ${i}_tmp
done

可以在shell中采用多种参数替换方法，对于多参数处理问题来说，这些方法通常
提供会一种精巧的解决方案。
${param:-defalt}   如果param为空，就把它设置为defalt的值。
${#param}          给出param的长度。
${param%word}      从param的尾部开始删除与word匹配的最小部分，然后
		   返回剩余部分。
${param%%word}     从param的尾部开始删除与word匹配的最大部分，然后
		   返回剩余部分。
${param#word}      从param的头部开始删除与word匹配的最小部分，然后
		   返回剩余部分。
${param##word}     从param的头部开始删除与word匹配的最大部分，然后
		   返回剩余部分。
特别是上表中对字符串进行部分删除的最后4个参数扩展方法，在处理文件名和
路径时非常有用。如下例子：
#!/bin/bash

unset foo
echo ${foo:-bar}

foo=fud
echo ${foo:-bar}

foo=/usr/bin/X11/startx
echo ${foo#*/}
echo ${foo##*/}

bar=/usr/local/etc/local/networks
echo ${bar%local*}
echo ${bar%%local*}

exit 0

假设你想使用cjpeg程序将一个GIG文件转换为一个JPEG文件，但有时，你可能
希望对大量文件执行此类操作，看下例：
#!/bin/bash

for image in *.gif
do 
	cjpeg $image > ${image%%gif}jpg
done
=============================================================================
here文档
========
在shell脚本程序中向一条命令传递输入的一种特殊方法是使用here文档。它
允许一条命令在获得输入数据时就好象是在读取一个文件或键盘一样，而实际
上是从脚本程序中得到输入数据。here文档以两个连续的小于号<<开始，紧跟着
一个特殊的字符序列，该序列将在文档的结尾处再此出现。例子：
#!/bin/bash
cat <<!FUNKY!
hello
this is a here
document
！FUNKY！
here文档功能更常见的用途是在脚本程序中输出大量的文本，从而避免用echo
语句来输出每一行。
如果想按预定的方式处理一个文件中的几行，你可以使用ed行编辑器，并在
脚本程序中通过here文档向它提供命令。例子：
文件内容如下：a_text_file
That is line 1
That is line 2
That is line 3
That is line 4
脚本：
#!/bin/bash
ed a_text_file <<!FunckyStuff!
3
d
.,\$s/is/was/
w
q
!FunkyStuff!
exit 0
输出：
That is line 1
That is line 2
That was line 4
=============================================================================
