============================================================
1.函数中输出函数名：$FUNCNAME
function log() {
	echo ${FUNCNAME[@]}
}
function action() {
	log
}
action
此变量是一个数组，返回的是函数名称，如嵌套调用函数，会按调用
顺序排列所有函数的数组。
输出内容：log action
用途：日志函数或者函数名传递等。
如果只想获得当前函数的名称，直接输出：echo $FUNCNAME
============================================================
2.循环中的跳转：continue [n]
function son() {
	for z in 1 2 3; do
		if true; then
			echo $x,$y,$z
			continue 3
		fi
	done
}
function father() {
	for x in 1 2 3; do
		for y in 1 2 3; do
			son
		done
	done
}
father
声明：continue可用于子函数，跳转到父函数中的指定层次循环中。
n值从1开始（不写默认为1，数字越大则层数越高，超过总循环层数
时值为最大层数）；
以上代码中只有最上层x会正常循环完，其余子层都在首轮跳出，此
时n的最大值为3；
若在son后加一个&使其在后台运行，此时continue能控制y,z两层，
但不能跳转到x，即n的最大值为2.
============================================================
3.uniq注意事项
该命令uniq只会比较相邻的行而不会跨向比较，除非必要，否则最好
先进行排序：sort -u
============================================================
4.变量简介引用
a=1
b=a
echo ${!b}      //输出1
eval echo \$$b  //输出1
============================================================
5.sed模式空间
printf 'aaa\naaa' | sed 's/a/A/'
printf 'aaa\naaa' | sed 's/a/A/g'
printf 'aaa\naaa' | sed ':a;N;$!ba;s/a/A/'
printf 'aaa\naaa' | sed ':a;N;$!ba;s/a/A/g'
第一个会替换每一行的第一个小写a，第二与第四个则会替换所有小
写a，第三个只会替换第一行的第一个小写a。
如果原始数据只有一行，那么最后两种写法均不会生效，因此，只是
替换第一行的第一个字符的写法为最好为：
printf 'aaa\naaa\n' | sed '1s/a/A/'
其中有 :a N $!ba 这三个字段是为了构建一个循环将整个文件逐行
添加至pattern space(匹配空间)，用Next命令将一个新的输入行追
加至pattern space的当前行，最后一行不跳转至pattern space中，
其他行都跳转至匹配空间。
a append N next b break q quit $ 变量环境 ! 非 c 替换
shell awk sed这三者均是逐行执行的
============================================================
