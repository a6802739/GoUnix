==============================================================================
批量转换GBK编码到UTF-8编码文件(iconv)
=====================================
find default -type f -exec file -i {} \; > /tmp/afile
grep "charset=utf-8" /tmp/afile
1先用命令将所有需要的文件查找出是什么类型的编码并将内容重定向到文件中
2在重定向文件中查找是utf-8编码的文件找出来排除掉
-------------------------------------------------
find default -type d -exec mkdir -p utf/ {} \;
find default -type f -exec iconv -f GBK -t UTF-8 {} -o utf/ {} \;
1首先按原目录递归建立起来
2再将发现的GBK编码文件转换成UTF-8编码的文件并放入建立的目录中
注意:将原来就是UTF-8编码的文件转换成UTF-8编码的文件会出现乱码
---------------------------------------------------------------
iconv
-----
输入/输出格式
-f	--from-code 	原始文本编码(编码名称)
-t	--to-code	输出编码(编码名称)
-l	--list		列举所有已知的字符集
输出控制
-c 从输出中忽略无效的字符
-o,--output	输出文件
-s,--slient	关闭警告
--verbose	打印进度信息
==============================================================================
curl命令
========
-o/-O选项保存下载的文件到指定的文件中(可使用重定向字符输出)
-o filename url	将文件保存为命令行中指定的文件名
-O url		使用URL中默认的文件名保存到本地
curl -O URL1 -O URL2	可从同一站点下载多个文件
-------------------------------------------------
curl -L url		强制重定向
curl -C - -O url	使用-C选项可对大文件使用断点续传功能
-------------------------------------------------------------
curl --limit-rate 1000B -O url
通过--limit-rate选项对CURL的最大网络(每秒1000B)使用进行限制
-----------------------------------------------------------
curl -z 21-Dec-13 url
#文件在2013/12/21之后有过更新才会进行下载
下载文件时,可对文件最后修改日期判断,如果文件在指定日期内修改过,就下载.
----------------------------------------------------------------------
在访问需要授权的页面时,可通过-u选项提供用户名和密码进行授权
curl -u username:password url
通常的做法是在命令行只输入用户名,之后会提示输入密码,这个可以保证在常看历史记录
时不会将密码泄漏
curl -u username url
---------------------------------
从FTP服务器下载文件
-------------------
#列出public_html下的所有文件夹和文件
curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/
#下载file.txt文件
curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/file.txt
使用-T选项可将指定的本地文件上传到FTP服务器上
#将file.txt文件上传到服务器
curl -u ftpuser:ftppass -T file.txt ftp://ftp.testserver.com
#同时上传多个文件
curl -u ftpuser:ftppass -T "{file1,file2}" ftp://ftp.testserver.com
#从标准输入获取内容保存到服务器指定的文件中
curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/file.txt
----------------------------------------------------------------
为curl设置代理
--------------
curl -x proxyserver.test.com:3128 url
#指定代理主机和端口
---------------------------------------
传递请求数据
------------
默认curl使用GET方式请求数据,可以通过--data/-d方式指定使用POST方式传递数据
#GET
curl -u username https://api.github.com
#POST
curl -u username --data "param1=value1&param2=value" https://api.github.com
#也可以指定一个文件,将该文件中的内容当作数据传递给服务器
curl --data @filename https://githbu.api.com/authorizations
#注意:通过POST方式传递数据,特殊字符需要事先转义,如空格转换为%20
curl -d "value%201" http://hostname.com
#--data-urlencode选项提供的参数会自动转义特殊字符
curl --data-urlencode "value 1" http://hostname.com
#除了使用GET和POST协议外,还可以通过-X选项指定其它协议,-I显示文档信息即head
curl -I -X https://api.github.com
#上传文件
curl --form "fileupload=@filename.txt" http://hostname/resource
==============================================================================
watch刷新监控
=============
在watch后面接运行的命令,watch就会重复运行,每次结果都更新在屏幕上,默认2s间隔
-n	指定时间间隔
-d	高亮显示变动
----------------------
watch -n 1 -d netstat -ant
watch -d -n 1 netstat -ntpl
watch uptime
watch -n 60 from  //监控mail
watch -n 1 "df -i;df"  //监测磁盘inode和block数目变化情况
watch -n 1 -d 'pstree | grep http'  //显示http连接数的变化情况
watch -d 'ls -l | grep file'  //监测当前目录中file文件的变化
==============================================================================
监测硬盘的温度
--------------
hddtemp /dev/sda

--------------
硬盘的读取速度
--------------
hdparm -t -T /dev/sda

--------------------
硬盘的信息及状态检查
--------------------
smartctl -i /dev/sda
smartctl -H /dev/sda

---------------------
监测CPU温度及风扇转速
---------------------
sensors

------------
监测显卡性能
------------
glxgears
==============================================================================
在不同网段的路由
================
环境介绍:
一台192.168.16.0网段的服务器,IP地址为192.168.16.2网关为192.168.16.1
一台192.168.1.0网段的服务器,IP地址为192.168.1.2网关为192.168.1.1
目的:
实现不同网段的两台服务器相互通信
--------------------------------
在192.168.16.2的服务器上添加路由表
route add -net 192.168.1.0 gw 192.168.16.1 netmask 255.255.255.0	
==============================================================================
brctl网桥命令
=============
网桥(bridge)是连接两个局域网的一种存储和转发设备,他将一个大的LAN分割为多个网段
或将两个一个的LAN互联为一个逻辑LAN.网桥根据MAC地址来转发数据帧,网桥工作在数据
链路层,可以看作一个"底层的路由器",不过路由器工作在网络层,根据网络地址(IP地址)
进行数据包的转发.
---------------------
生成树协议(STP):
生成树算法的网桥协议STP,他通过生成生成树保证一个已知的网桥在网络拓扑中沿一个环
动态工作.
生成树协议的两个功能:
1 利用生成树算法,在以太网络中创建一个以某台交换机的某个端口为根的生成树,避免回
  路.
2 在以太网络拓扑发生变化时,通过生成树协议达到收敛保护的目的.
生成树协议拓扑结构的思路是,不论网桥(交换机)之间采用怎样物理连接,网桥(交换机)能
够自动发现一个没有环路的拓扑结构的网络,这个逻辑拓扑结构的网络必须是树形的.生成
树协议还能够确定有足够的连接通向整个网络的每一个部分.所有网络节点要么进入转发
状态,要么进入阻塞状态,这样就建立了整个局域网的生成树.
-------------------------------------------------------
brctl-util工具包中的brctl命令是用来配置网桥的,同时可以在主机上创建和管理虚拟的
网桥.
由于网桥工作需要进行转发,所有需要将系统的转发打开.
简单的就是echo 1 > /proc/sys/net/ipv4/ip_forward
---------

查看本机网桥
brctl show

创建虚拟网桥
brctl addbr bridge0

删除网桥
brctl delbr bridge0

给网桥接入设备
brctl addif bridge0 eth0

将接入网桥的设备删除
brctl delif bridge0 eth0

查看本机网桥的MAC地址
brctl showmacs bridge0

显示网桥的stp信息
brctl showstp bridge0

网桥生成树的开关
brctl stp bridge0 on|off

下面这几个是生成树相关的一些设置:
brctl setageing <bridge> <time>			生存周期
brctl setbridgeprio <bridge> <prio>		网桥优先级
brctl setportprio <bridge> <port> <prio>	设置端口的优先级
brctl setfd <bridge> <time>			转发延迟时间
brctl sethello <bridge> <time>			hello时间
brctl setmaxage <bridge> <time>			消息的最大生命周期
brctl setpathcost <bridge> <port> <const>	设置路径的权值

------------------------------------------------------------------
实例一
环境介绍:
1 五台主机
2 其中一台主机装有linux,安装了网桥brctl-util模块,而且有四块物理网卡,分别连接同
  一网段的其它主机,此主机的IP地址为192.168.1.1
3 其它四台主机IP分别为:192.168.1.2 192.168.1.3 192.168.1.4 192.168.1.5
目的:
以网桥的形式将这五台计算机组成一个在192.168.1.0/24的逻辑网段

brctl addbr br0			建立一个网桥br0
brctl addif br0 eth0		添加设备eth0
brctl addif br0 eth1		添加设备eth1
brctl addif br0 eth2		添加设备eth2
brctl addif br0 eht3		添加设备eth3
#网桥的每个物理网卡作为一个端口,运行与混杂模式,而且是在链路层工作,不需要IP.
ifconfig eth0 0.0.0.0
ifconfig eth1 0.0.0.0
ifconfig eth2 0.0.0.0
ifconfig eth3 0.0.0.0
#给网桥br0的虚拟网卡配置IP:192.168.1.1
ifconfig br0 192.168.1.1
#这个实例是将这几台计算机配置在一个逻辑网段里了,实际上可以配置成多个逻辑网段中
#相当于在交换机中划分多个VLAN.
==============================================================================
ip命令
======
ip命令与ifconfig,route命令类似,但其功能更加强大,并可取代ifconfig,route命令.
命令中好多的选项和参数都有简写,但是如果都那样写的话,只会让事情变得更糟糕.
由于ip命令太强大了,通过ip命令的骨架来认识他更好,对于更多更加详细ip命令的细节可
查看系统中命令的帮助man ip.

命令格式: ip [OPTIONS] OBJECT { [COMMAND [ARGUMENTS]] | help }
------------------------------------------------------------------------------
OPTIONS		是修改ip行为或改变其输出的选项,所有的选项都是以-字符开头,分为
		长短两种行式.
------------------------------------------------------------------------------
OBJECT		是要管理设置及显示信息的对象,如addr maddr(多播地址) link route
		mroute(多播路由) netns(网络名字空间) tunnel(隧道) 等等
------------------------------------------------------------------------------
COMMAND		设置针对指定对象执行的操作,这和对象的类型有关,比如set delete 
		flush(清除) show list get change replace
------------------------------------------------------------------------------
ARGUMENTS	是COMMAND的一些参数,他依赖于对象和命令.这些参数的形式比较多,比
		如,flag有一个关键词组成,parameter由一个关键词加一个数值组成.
------------------------------------------------------------------------------
help		这个用来查询相应对象的帮助信息,这个依赖对象.
------------------------------------------------------------------------------


OPTION
------------------------------------------------------------------------------
-V(ersion)	打印ip的版本
------------------------------------------------------------------------------
-s(tatistics)	输出更为详尽的信息
------------------------------------------------------------------------------
-f(amily)	这个后面接协议种类,包括:inet inet6 link,强调使用的协议种类,如
		果没有协议种类就是用默认值inet,link特殊,不涉及任何网络协议.
------------------------------------------------------------------------------
-4		是-family inet的简写
------------------------------------------------------------------------------
-6		是-family inet6的简写
------------------------------------------------------------------------------
-0		是-family link的简写
------------------------------------------------------------------------------
-o(neline)	对每行记录都使用单行输出,回行用字符代替.如果需要使用wc grep等
		工具进行处理ip的输出,这个选项很有用.
------------------------------------------------------------------------------
-r(esolve)	查询域名解析系统,用获得的主机名代替主机IP地址
------------------------------------------------------------------------------


OBJECT
-----------------------------------------------------------------------------
link		网络设备
-----------------------------------------------------------------------------
address		一个设备的协议(IP或者IPV6)地址
-----------------------------------------------------------------------------
neighbour	ARP或者NDISC缓冲区条目
-----------------------------------------------------------------------------
route		路由表条目
-----------------------------------------------------------------------------
rule		路由策略数据库中的规则
-----------------------------------------------------------------------------
maddress	多播地址
-----------------------------------------------------------------------------
mroute		多播路由患处取条目
-----------------------------------------------------------------------------
tunnel		IP上的通道
-----------------------------------------------------------------------------

==============================================================================
hack music
==========

moc包中的mocp提供了一个ncureses界面的音乐播放软件.

lame进行音轨转换,sox播放转换过来的音频文件.
lame --decode music.mp3 - | play -

==============================================================================
虚拟化
======

kvm是内核虚拟化,提供CPU硬件支持的虚拟化技术.
kvm是linux的一个模块,可以用modprobe去加载kvm模块.
仅有kvm模块是不够的,用户无法直接控制内核模块做事情,必须有一个用户空间的工具.
这个工具就是QEMU.

QEMU是虚拟化管理工具并且也可以提供全套虚拟解决方案,它可以虚拟不同的CPU.

QEMU可以不依赖kvm模块存在,但是虚拟的速度慢,如果QEMU使用内核kvm模块,可以虚拟出
速度比较快的虚拟机,但是kvm需要硬件CPU虚拟化指令的支持.

QEMU和kvm之间的关系是二者相互独立的.

kvm命令只是对QEMU工具进行了封装.

-----------------------------------------------------------------------------

1)创建磁盘镜像
qemu-img create debian.img 2G
或者(假如想使用QEMU自己的"Copy On Write"镜像格式qcow2磁盘镜像格式)
qemu-img create -f qcow2 debian.cow 2G

2)准备一个Debian系统启动镜像.
debian-i386.iso

3)启动镜像
kvm -hda debian.img -cdrom debian-i386.iso -boot d -m 256

4)像通常那样安装系统.

5)安装完毕之后,系统可以被启动.
kvm -hda debian.img -m 256

6)备份磁盘镜像(这个磁盘镜像debian.img是一个松散的文件).
tar -c --sparse -f backup.tar debian.img (--sparse高效处理离散文件)
通过tar xf解压,这个松散的文件被恢复并能立刻被加载启动.

可以将debian.img转换成QEMU自己的Copy On Write镜像,不会压缩文件空间,但是仍可
立即运行.
qemu-img convert -c debian.img -O qcow debian_recompressed.img

可能镜像过大,可以在启动的客户系统中删除残余文件.
dd if=/dev/zero of=/tmp/junk;sync;rm /tmp/junk

--------------------------------------------------

kvm命令参数简介

-L dir
指向BIOS和VGA BIOS所在目录

-hda/-hdb/-hdc/-hdd "file"
使用"file"作为硬盘0/1/2/3镜像

-cdrom "file"
使用"file"作为光盘镜像(文件应该是ISO类型)

-fda/-fdb "file"
使用"file"作为磁盘0/1镜像

-boot [a|b|c]
使用磁盘<a>,光盘<d>,或者硬盘<c>启动

-m 256
使用256Mb的内存

-smp 2
smp处理器个数为2个,如果机器为4核处理器,就为4

-localtime
使用本地时间

-clock rtc
使用rtc时钟

-usb
允许使用usb设备

-net nic
创建一块新的网卡

-net nic,vlan=0,macaddr=52-54-00-12-34-01 -net tap,vlan=0,ifname=tap0,script=no
示例,使用网络并连接到一个存在的网络设备tap0,mac地址需要自己编一个,多系统怕重复

-soundhw c1
使用声卡设备

-soundhw all
使用全部声卡

==============================================================================
==============================================================================
