1.查看某一个command的详细使用方法：
**docker COMMAND --help
2.搜索可用的docker镜像：
**docker search NAME
3.下载镜像：
**docker pull NAME[:TAG]
4.查看安装的镜像：
**docker images [NAME]
5.在docker容器中运行的命令：
**docker run IMAGE [COMMAND][ARG...]
**docker run命令有两个参数.
**一个是镜像名，一个是要在镜像中运行的命令。
**如docker run centos echo 'hello world!'
6.列出容器：
**docker ps -a 
**查看最近生成的容器：docker ps -l
**查看正在运行的容器：docker ps
7.显示容器的标准输出：
**docker logs CONTAINERID
**一般写最开始的三至四个字符即可。
8.在容器中安装新程序：
**docker run centos yum install -y net-tools
**如果yum不指定-y参数的话，yum命令会进入交互模式，需要用户输入
**命令进行确认，在docker环境中是无法响应这种交互的。
**使用docker run的-i -t参数就会响应这种交互。
**比如，docker run -i -t centos yum install net-tools
9.保存对容器的修改并生成新的镜像：
**docker commit CONTAINERID [REPOSITORY[:TAG]]
**REPOSITORY参数可以是新的镜像名字，也可以是旧的镜像名；
**如果同旧的镜像名及TAG都相同，会覆盖掉旧的镜像。
10.停止正在运行的容器：
**docker stop CONTAINERID
**默认等待10秒钟再杀死指定容器。可以使用-t参数来设置等待时间。
11.查看容器或镜像的详细信息：
**docker inspect CONTAINERID|IMAGE
**参数可以是容器的ID或者是镜像名（NAME:TAG）
12.删除容器：
**docker rm CONTAINERID
**查看所有容器ID：docker ps -a -q
**删除所有容器：docker rm $(docker ps -a -q)
13.删除镜像：
**docker rmi IMAGE
14.查看docker的信息，包括containers和images数目，kernel版本等。
**docker info 
15.创建一个新容器并登入：
**docker run -i -t IMAGE /bin/bash
16.启动一个退出的容器：
**docker start CONTAINERID
17.连接(attach)到运行中的容器：
**docker attach CONTAINERID